if ('undefined' === typeof isBrowser) {
  var chai = require('chai')
    , dragonfly = require('..');
}

var should = chai.should();

describe('Dragonfly', function () {

  it('has a a version', function () {
    dragonfly.should.have.property('version');
  });

  it('can construct an error repository', function () {
    var repo = dragonfly('TestError');
    repo.should.respondTo('register');
    repo.should.respondTo('create');
  });

  it('can register a prototype', function () {
    var repo = dragonfly('TestError')
      , spec = { message: 'This is the message' };
    repo.register('test', spec);
    repo.should.have.deep.property('_specs.test')
      .to.deep.equal(spec);
  });

  it('can create an error', function () {
    var repo = dragonfly('TestError');
    repo.register('test', {
        message: 'this is a test'
      , code: 'ETESTERR'
    });

    var err = repo.create('test');
    err.should.be.instanceof(Error);
    err.should.have.property('name', 'TestError');
    err.should.have.property('stack').a('string');
    (function () {
      throw err;
    }).should.throw(repo._proto, 'this is a test');
  });

  it('can gracefully handle missing error', function () {
    var repo = dragonfly('TestError');

    (function () {
      var err = repo.create('test');
    }).should.throw(Error, /^Invalid error creation\:/);
  });

});
